/**
 * Â© 2022 WavePlay <dev@waveplay.com>
 */
import type { NextRouter } from 'next/router';
import { FunctionComponent, ReactElement, useEffect } from 'react';
import { PilotConfig, PilotRouter, PilotStateProps } from './pilot';
import { PilotRoute, PilotRouteOptions } from './route';
import { PilotRenderer } from './renderer';
import { usePilot } from './use-pilot';
import { importPage, routes } from './_generated';

interface PilotAreaProps {
	children?: any
	config?: PilotConfig
	defaultRoute?: string
	/**
	 * @deprecated use config instead
	 */
	logLevel?: 'trace' | 'debug' | 'info' | 'warn' | 'error'
	name?: string
	persistPlaceholder?: boolean
	placeholder?: (visible: boolean) => ReactElement<PilotStateProps>
	render?: boolean
	/**
	 * @deprecated use config instead
	 */
	nextRouter?: NextRouter | null
	/**
	 * @deprecated use config instead
	 */
	router?: PilotRouter
}
export const PilotArea: FunctionComponent<PilotAreaProps> = (props: PilotAreaProps) => {
	const { children, config, defaultRoute = '/', logLevel, name, nextRouter, persistPlaceholder, placeholder, render = true, router } = props;
	const pilot = usePilot(name);
	pilot.config({ logLevel, nextRouter, router });
	if (config) {
		pilot.config(config);
	}

	useEffect(() => {
		(async () => {
			let paths: PilotRouteOptions[] = [];

			// Automatically import all pages generated by the `pilot build` command
			// Only do this for PilotArea instances without a name so named areas can be used independently
			if (!name) {
				for (const route of routes) {
					const page = await importPage(route.path);
					paths.push({
						component: page.default,
						default: route.path === defaultRoute,
						getProps: route.getProps ? page[route.getProps] : undefined,
						path: route.path
					});
				}
				pilot.log('debug', `Imported ${paths.length} automatically generated pages`);
			}

			// Add all routes defined by the user using <PilotRoute> components in this area
			let declaredRoutes: PilotRouteOptions[] = [];
			if (Array.isArray(children)) {
				declaredRoutes = children.filter(child => child.type === PilotRoute).map(child => child.props);
			} else if (children?.type === PilotRoute) {
				declaredRoutes = [children.props];
			}

			if (declaredRoutes.length) {
				paths = paths.concat(declaredRoutes);
				pilot.log('debug', `Imported ${declaredRoutes.length} manually declared pages`);
			}
		
			for (const path of paths) {
				pilot.addRoute(path);
			}

			// Automatically load the default route (if any)
			const defaultPath = paths?.find((path: PilotRouteOptions) => path.default);
			pilot.log('debug', defaultPath ? `Flying to default path: ${defaultPath.path}` : 'No default route was found');
			
			if (defaultPath) {
				pilot.fly(defaultPath.path);
			}
		})();
	}, []);

	return (
		<>
			{ children }
			{ render && <PilotRenderer name={name} persistPlaceholder={persistPlaceholder} placeholder={placeholder}/> }
		</>
	)
};
export default PilotArea;
