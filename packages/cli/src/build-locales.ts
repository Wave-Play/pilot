/**
 * © 2022 WavePlay <dev@waveplay.com>
 */
import appRoot from 'app-root-path';
import { Command, OptionValues } from 'commander';
import fs from 'fs-extra';
import klaw from 'klaw';
import pino, { Logger } from 'pino';
import { BuildManifest } from './';
import koder from './koder';

// Name of the file that will be generated
const GENERATED_FILE = 'import-resource.js';

const command = new Command('build:locales')
	.description('syncs locale files and generates static imports')
	.option('-s --silent', 'do not print anything')
	.option('-v --verbose', 'print more information for debugging')
	.action(action);
export default command;

export async function action(options: OptionValues) {
	const startTime = Date.now();

	// Create a logger
	const logger = pino({
		enabled: !options.silent,
		level: options.verbose ? 'debug' : 'info',
		timestamp: false,
		transport: {
			target: 'pino-pretty',
			options: {
				colorize: true
			}
		}
	});
	logger.debug(`[PilotJS] Starting build:locales...`);

	// Copy all i18n files from /public into this library
	// This is because React Native apps load from /assets instead, yet importing dynamically is a pain
	logger.debug(`[PilotJS] Using root directory "${appRoot}"`);
	await fs.copy(appRoot + '/public/locales', appRoot + '/assets/locales');

	// Register every file in a store first to prevent out-of-order imports
	const store = await readAllLocales(logger);

	// Generate the import file
	await writeGeneratedFile(store, logger);
	await syncManifest(store, logger);
	logger.info(`[PilotJS] Built ${Object.keys(store).length} locales in ${Date.now() - startTime}ms ✨`);
};

const readAllLocales = async (logger: Logger): Promise<any> => {
	const store: any = {};
	for await (const file of klaw(appRoot + '/assets/locales')) {
		// Skip directories
		if (file.stats.isDirectory()) {
			continue;
		}
		logger.debug(`[PilotJS] Reading locale namespace "${file.path}"...`);

		// Filter just the pure locale/namespace.json keys
		const path = file.path.substring(file.path.lastIndexOf('/locales') + '/locales'.length + 1);
		const locale = path.substring(0, path.indexOf('/'));
		const ns = path.substring(path.indexOf('/') + 1, path.lastIndexOf('.'));

		// Include this file in the store
		if (!store[locale]) {
			store[locale] = [];
		}
		store[locale].push(ns);
	}

	return store;
};

const syncManifest = async (store: any, logger: Logger): Promise<void> => {
	let manifest: BuildManifest = {};
	const manifestFile = appRoot + '/.pilot/build-manifest.json';

	// Read existing manifest if it exists
	if (await fs.pathExists(manifestFile)) {
		const manifestContents = await fs.readFile(manifestFile, 'utf8');
		manifest = JSON.parse(manifestContents);
	}

	// Apply newly read pages to the manifest
	manifest.locales = {};
	for (const locale in store) {
		manifest.locales[locale] = store[locale];
	}

	// Sort the manifest object keys for cleanliness
	manifest = Object.keys(manifest)
		.sort()
		.reduce((acc, key) => ({
			...acc, [key]: manifest[key]
		}), {});

	// Write the manifest to .pilot/build-manifest.json
	logger.debug(`[PilotJS] Synchronized build manifest`);
	await fs.outputFile(manifestFile, JSON.stringify(manifest, null, 2));
};

const writeGeneratedFile = async (store: any, logger: Logger): Promise<void> => {
	const kode = koder({ comment: 'This file was automatically generated by PilotJS' })
		// Create an importResource function that will host all static import statements
		.function('importResource', { export: true, params: ['locale', 'ns'] })
		.block(koder()
			.switch('locale')
			.block(koder()

				// Create a nested switch statement for each locale
				.cases(Object.keys(store).map(locale => ({
					case: locale,
					body: koder().switch('ns')
						.block(koder()

							// Each namespace in the store's locales will get its own case
							.cases(store[locale].map(ns => ({
								case: ns,
								body: koder().import(`../../../../assets/locales/${locale}/${ns}.json`, { dynamic: true, return: true })
							})))
							.default(koder().throw(new Error(`Could not find namespace in "${locale}" locale: \${ns}`)))
						)
				})))
				.default(koder().throw(new Error(`Could not find locale: \${locale}`)))
			)
		);

	// Override existing stub file with the real deal!
	const file = appRoot + '/node_modules/@waveplay/pilot-i18next/dist/' + GENERATED_FILE;
	logger.debug(`[PilotJS] Writing ${Object.keys(store).length} locales to "${file}"`);
	await fs.outputFile(file, kode.toString());
};
